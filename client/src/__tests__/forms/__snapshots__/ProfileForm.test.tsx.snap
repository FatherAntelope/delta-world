// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ProfileForm component form testing: Render with snapshot 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [MockFunction] {
        "calls": Array [
          Array [
            [Function],
          ],
          Array [
            [Function],
          ],
          Array [
            [Function],
          ],
          Array [
            [Function],
          ],
          Array [
            [Function],
          ],
          Array [
            [Function],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <HashRouter>
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "createHref": [Function],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <ProfileForm>
        <UserFullForm>
          <div
            className="row"
          >
            <Component
              dateOfBirth="1972-08-07T22:16:47.420Z"
              dateOfRegister="1972-08-07T22:16:47.420Z"
              edit={false}
              email="mail@example.ru"
              fullName="commons.userAppeal.mrs. Oleg Ivanov"
              gender="commons.userGender.male"
              id="24r43wef43t"
              imageURL="url"
              phone="88005553535"
            >
              <div
                className="card-user-full "
              >
                <div
                  className="card-user-full__body"
                >
                  <div
                    className="card-user-full__image"
                  >
                    <img
                      alt="img-user"
                      src="url"
                    />
                  </div>
                  <div
                    className="card-user-full__content"
                  >
                    <div>
                      <h2
                        className="card-user-full__title"
                      >
                        commons.userAppeal.mrs. Oleg Ivanov
                      </h2>
                      <div
                        className="card-user-full__info"
                      >
                        <p
                          className="card-user-full__text"
                        >
                          <b>
                            cardUserProfile.gender 
                          </b>
                          commons.userGender.male
                        </p>
                        <p
                          className="card-user-full__text"
                        >
                          <b>
                            cardUserProfile.dateOfBirth 
                          </b>
                          1972-08-07T22:16:47.420Z
                        </p>
                        <p
                          className="card-user-full__text"
                        >
                          <b>
                            cardUserProfile.dateOfRegistration 
                          </b>
                          1972-08-07T22:16:47.420Z
                        </p>
                        <p
                          className="card-user-full__text"
                        >
                          <b>
                            cardUserProfile.email 
                          </b>
                          mail@example.ru
                        </p>
                        <p
                          className="card-user-full__text"
                        >
                          <b>
                            cardUserProfile.phone 
                          </b>
                          88005553535
                        </p>
                      </div>
                    </div>
                    <div>
                      <p
                        className="card-user-full__text"
                      >
                        <b>
                          cardUserProfile.id 
                        </b>
                        24r43wef43t
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </Component>
          </div>
        </UserFullForm>
        <UserPostsForm>
          <div
            className="row"
          >
            <div
              className="col-4"
              key="32rfe232gh"
            >
              <Component
                text="lorem ipsum dolor"
              >
                <div
                  className="card-post "
                >
                  <div
                    onClick={[Function]}
                    style={
                      Object {
                        "cursor": "pointer",
                        "width": "100%",
                      }
                    }
                  >
                    <Component>
                      <div
                        className="card-post__image"
                      >
                        <img
                          alt="img"
                        />
                      </div>
                    </Component>
                  </div>
                  <p
                    className="card-post__text"
                  >
                    lorem ipsum dolor
                  </p>
                </div>
              </Component>
            </div>
          </div>
        </UserPostsForm>
        <ModalPostForm>
          <Modal
            isDarkTheme={false}
            size=""
          >
            <div
              className="modal undefined"
            >
              <div
                className="modal__close false"
                onClick={[Function]}
              >
                <span
                  className="modal__close-icon false"
                />
              </div>
              <div
                className="modal__dialog false "
              >
                <div
                  className="
          modal__content 
          undefined 
          false
          "
                  onClick={[Function]}
                >
                  <PostForm>
                    <Component
                      text="lorem ipsum dolor"
                    >
                      <div
                        className="card-post card-post_big "
                      >
                        <Component
                          imageURL="default-user-avatar.jpg"
                        >
                          <div
                            className="card-post__image card-post__image_big"
                          >
                            <img
                              alt="img"
                              src="default-user-avatar.jpg"
                            />
                          </div>
                        </Component>
                        <p
                          className="card-post__text_big"
                        >
                          lorem ipsum dolor
                        </p>
                      </div>
                    </Component>
                  </PostForm>
                  <CommentsForm>
                    <div
                      className="row"
                    >
                      <div
                        className="col-6"
                        key="7268yj93i2jn"
                      >
                        <CardComment
                          dateOfPublication="1972-08-07T22:16:47.420Z"
                          isDarkTheme={false}
                          text="lorem ipsum dolor"
                          userAvatarURL="url"
                          userFullName={
                            <Tooltip
                              isDarkTheme={false}
                              textInfo="32rfe232gh"
                            >
                              <Link
                                to="/user/32rfe232gh"
                              >
                                <span
                                  onClick={[Function]}
                                >
                                  commons.userAppeal.male. Ferdinand Ellington
                                </span>
                              </Link>
                            </Tooltip>
                          }
                        >
                          <div
                            className="card-comment "
                          >
                            <div
                              className="card-comment__content"
                            >
                              <div
                                className="card-comment__avatar"
                              >
                                <Avatar
                                  shape="circle"
                                  size="default"
                                  src="url"
                                >
                                  <span
                                    className="ant-avatar ant-avatar-circle ant-avatar-image"
                                    style={Object {}}
                                  >
                                    <img
                                      onError={[Function]}
                                      src="url"
                                    />
                                  </span>
                                </Avatar>
                              </div>
                              <div
                                className="card-comment__body"
                              >
                                <div
                                  className="card-comment__info"
                                >
                                  <div
                                    className="card-comment__name "
                                  >
                                    <Tooltip
                                      isDarkTheme={false}
                                      textInfo="32rfe232gh"
                                    >
                                      <div
                                        className="tooltip"
                                        onMouseOut={[Function]}
                                        onMouseOver={[Function]}
                                      >
                                        <Link
                                          to="/user/32rfe232gh"
                                        >
                                          <LinkAnchor
                                            href="#/user/32rfe232gh"
                                            navigate={[Function]}
                                          >
                                            <a
                                              href="#/user/32rfe232gh"
                                              onClick={[Function]}
                                            >
                                              <span
                                                onClick={[Function]}
                                              >
                                                commons.userAppeal.male. Ferdinand Ellington
                                              </span>
                                            </a>
                                          </LinkAnchor>
                                        </Link>
                                      </div>
                                    </Tooltip>
                                  </div>
                                  <div
                                    className="card-comment__date "
                                  >
                                    1972-08-07T22:16:47.420Z
                                  </div>
                                </div>
                                <p
                                  className="card-comment__text"
                                >
                                  lorem ipsum dolor
                                </p>
                              </div>
                            </div>
                          </div>
                        </CardComment>
                      </div>
                    </div>
                  </CommentsForm>
                </div>
              </div>
            </div>
          </Modal>
        </ModalPostForm>
        <ModalPostForm>
          <Modal
            isDarkTheme={false}
            size="mini"
          >
            <div
              className="modal undefined"
            >
              <div
                className="modal__close false"
                onClick={[Function]}
              >
                <span
                  className="modal__close-icon false"
                />
              </div>
              <div
                className="modal__dialog modal__dialog_mini "
              >
                <div
                  className="
          modal__content 
          undefined 
          false
          "
                  onClick={[Function]}
                >
                  <CardUserEdit
                    avatar="url"
                    firstName="Oleg"
                    gender="male"
                    lastName="Ivanov"
                    phone="88005553535"
                  >
                    <div
                      className="user-edit-form"
                    >
                      <div
                        className="user-edit-form__header"
                      >
                        <div
                          className="user-edit-form__image"
                        >
                          <img
                            alt="user-img"
                            src="url"
                          />
                        </div>
                      </div>
                      <div
                        className="user-edit-form__image-edit"
                      >
                        <Upload
                          accept="image/jpeg, image/png"
                          action=""
                          beforeUpload={[Function]}
                          className=""
                          customRequest={[Function]}
                          data={Object {}}
                          disabled={false}
                          listType="text"
                          multiple={false}
                          name="file"
                          showUploadList={false}
                          supportServerRender={true}
                          type="select"
                        >
                          <span
                            className=""
                          >
                            <div
                              className="ant-upload ant-upload-select ant-upload-select-text"
                            >
                              <Upload
                                accept="image/jpeg, image/png"
                                action=""
                                beforeUpload={[Function]}
                                component="span"
                                customRequest={[Function]}
                                data={Object {}}
                                disabled={false}
                                headers={Object {}}
                                listType="text"
                                multipart={false}
                                multiple={false}
                                name="file"
                                onBatchStart={[Function]}
                                onError={[Function]}
                                onProgress={[Function]}
                                onStart={[Function]}
                                onSuccess={[Function]}
                                openFileDialogOnClick={true}
                                prefixCls="ant-upload"
                                showUploadList={false}
                                supportServerRender={true}
                                type="select"
                                withCredentials={false}
                              >
                                <AjaxUploader
                                  accept="image/jpeg, image/png"
                                  action=""
                                  beforeUpload={[Function]}
                                  component="span"
                                  customRequest={[Function]}
                                  data={Object {}}
                                  disabled={false}
                                  headers={Object {}}
                                  listType="text"
                                  multipart={false}
                                  multiple={false}
                                  name="file"
                                  onBatchStart={[Function]}
                                  onError={[Function]}
                                  onProgress={[Function]}
                                  onStart={[Function]}
                                  onSuccess={[Function]}
                                  openFileDialogOnClick={true}
                                  prefixCls="ant-upload"
                                  showUploadList={false}
                                  supportServerRender={true}
                                  type="select"
                                  withCredentials={false}
                                >
                                  <span
                                    className="ant-upload"
                                    onClick={[Function]}
                                    onDragOver={[Function]}
                                    onDrop={[Function]}
                                    onKeyDown={[Function]}
                                    role="button"
                                    tabIndex="0"
                                  >
                                    <input
                                      accept="image/jpeg, image/png"
                                      key="rc-upload-1640118386561-2"
                                      multiple={false}
                                      onChange={[Function]}
                                      onClick={[Function]}
                                      style={
                                        Object {
                                          "display": "none",
                                        }
                                      }
                                      type="file"
                                    />
                                    <Button
                                      icon={<ForwardRef(UploadOutlined) />}
                                      loading={false}
                                      size="small"
                                    >
                                      <Wave>
                                        <button
                                          className="ant-btn ant-btn-sm"
                                          onClick={[Function]}
                                          type="button"
                                        >
                                          <ForwardRef(UploadOutlined)>
                                            <AntdIcon
                                              icon={
                                                Object {
                                                  "icon": Object {
                                                    "attrs": Object {
                                                      "focusable": "false",
                                                      "viewBox": "64 64 896 896",
                                                    },
                                                    "children": Array [
                                                      Object {
                                                        "attrs": Object {
                                                          "d": "M400 317.7h73.9V656c0 4.4 3.6 8 8 8h60c4.4 0 8-3.6 8-8V317.7H624c6.7 0 10.4-7.7 6.3-12.9L518.3 163a8 8 0 00-12.6 0l-112 141.7c-4.1 5.3-.4 13 6.3 13zM878 626h-60c-4.4 0-8 3.6-8 8v154H214V634c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8v198c0 17.7 14.3 32 32 32h684c17.7 0 32-14.3 32-32V634c0-4.4-3.6-8-8-8z",
                                                        },
                                                        "tag": "path",
                                                      },
                                                    ],
                                                    "tag": "svg",
                                                  },
                                                  "name": "upload",
                                                  "theme": "outlined",
                                                }
                                              }
                                            >
                                              <span
                                                aria-label="upload"
                                                className="anticon anticon-upload"
                                                role="img"
                                              >
                                                <IconReact
                                                  icon={
                                                    Object {
                                                      "icon": Object {
                                                        "attrs": Object {
                                                          "focusable": "false",
                                                          "viewBox": "64 64 896 896",
                                                        },
                                                        "children": Array [
                                                          Object {
                                                            "attrs": Object {
                                                              "d": "M400 317.7h73.9V656c0 4.4 3.6 8 8 8h60c4.4 0 8-3.6 8-8V317.7H624c6.7 0 10.4-7.7 6.3-12.9L518.3 163a8 8 0 00-12.6 0l-112 141.7c-4.1 5.3-.4 13 6.3 13zM878 626h-60c-4.4 0-8 3.6-8 8v154H214V634c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8v198c0 17.7 14.3 32 32 32h684c17.7 0 32-14.3 32-32V634c0-4.4-3.6-8-8-8z",
                                                            },
                                                            "tag": "path",
                                                          },
                                                        ],
                                                        "tag": "svg",
                                                      },
                                                      "name": "upload",
                                                      "theme": "outlined",
                                                    }
                                                  }
                                                >
                                                  <svg
                                                    aria-hidden="true"
                                                    data-icon="upload"
                                                    fill="currentColor"
                                                    focusable="false"
                                                    height="1em"
                                                    key="svg-upload"
                                                    viewBox="64 64 896 896"
                                                    width="1em"
                                                  >
                                                    <path
                                                      d="M400 317.7h73.9V656c0 4.4 3.6 8 8 8h60c4.4 0 8-3.6 8-8V317.7H624c6.7 0 10.4-7.7 6.3-12.9L518.3 163a8 8 0 00-12.6 0l-112 141.7c-4.1 5.3-.4 13 6.3 13zM878 626h-60c-4.4 0-8 3.6-8 8v154H214V634c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8v198c0 17.7 14.3 32 32 32h684c17.7 0 32-14.3 32-32V634c0-4.4-3.6-8-8-8z"
                                                      key="svg-upload-svg-0"
                                                    />
                                                  </svg>
                                                </IconReact>
                                              </span>
                                            </AntdIcon>
                                          </ForwardRef(UploadOutlined)>
                                          <span
                                            key=".0"
                                          >
                                            cardUserEdit.button.updatePhoto
                                          </span>
                                        </button>
                                      </Wave>
                                    </Button>
                                  </span>
                                </AjaxUploader>
                              </Upload>
                            </div>
                          </span>
                        </Upload>
                        <Button
                          id="buttonDeletePhoto"
                          onClick={[Function]}
                          size="small"
                        >
                          <Wave>
                            <button
                              className="ant-btn ant-btn-sm"
                              id="buttonDeletePhoto"
                              onClick={[Function]}
                              type="button"
                            >
                              <LoadingIcon
                                existIcon={false}
                                loading={false}
                                prefixCls="ant-btn"
                              >
                                <CSSMotion
                                  motionName="ant-btn-loading-icon-motion"
                                  onAppearActive={[Function]}
                                  onAppearStart={[Function]}
                                  onEnterActive={[Function]}
                                  onEnterStart={[Function]}
                                  onLeaveActive={[Function]}
                                  onLeaveStart={[Function]}
                                  removeOnLeave={true}
                                  visible={false}
                                >
                                  <DomWrapper />
                                </CSSMotion>
                              </LoadingIcon>
                              <span
                                key=".0"
                              >
                                cardUserEdit.button.deletePhoto
                              </span>
                            </button>
                          </Wave>
                        </Button>
                      </div>
                      <ForwardRef(InternalForm)
                        form={
                          Object {
                            "__INTERNAL__": Object {
                              "itemRef": [Function],
                              "name": "formEditDataUser",
                            },
                            "getFieldError": [Function],
                            "getFieldInstance": [Function],
                            "getFieldValue": [Function],
                            "getFieldsError": [Function],
                            "getFieldsValue": [Function],
                            "getInternalHooks": [Function],
                            "isFieldTouched": [Function],
                            "isFieldValidating": [Function],
                            "isFieldsTouched": [Function],
                            "isFieldsValidating": [Function],
                            "resetFields": [Function],
                            "scrollToField": [Function],
                            "setFields": [Function],
                            "setFieldsValue": [Function],
                            "submit": [Function],
                            "validateFields": [Function],
                          }
                        }
                        id="formEditDataUser"
                        layout="vertical"
                        name="formEditDataUser"
                        onError={[Function]}
                        onFinish={[Function]}
                      >
                        <SizeContextProvider>
                          <ForwardRef(Form)
                            className="ant-form ant-form-vertical"
                            form={
                              Object {
                                "__INTERNAL__": Object {
                                  "itemRef": [Function],
                                  "name": "formEditDataUser",
                                },
                                "getFieldError": [Function],
                                "getFieldInstance": [Function],
                                "getFieldValue": [Function],
                                "getFieldsError": [Function],
                                "getFieldsValue": [Function],
                                "getInternalHooks": [Function],
                                "isFieldTouched": [Function],
                                "isFieldValidating": [Function],
                                "isFieldsTouched": [Function],
                                "isFieldsValidating": [Function],
                                "resetFields": [Function],
                                "scrollToField": [Function],
                                "setFields": [Function],
                                "setFieldsValue": [Function],
                                "submit": [Function],
                                "validateFields": [Function],
                              }
                            }
                            id="formEditDataUser"
                            name="formEditDataUser"
                            onError={[Function]}
                            onFinish={[Function]}
                            onFinishFailed={[Function]}
                          >
                            <form
                              className="ant-form ant-form-vertical"
                              id="formEditDataUser"
                              onError={[Function]}
                              onReset={[Function]}
                              onSubmit={[Function]}
                            >
                              <FormItem
                                className="user-auth__field "
                                label={
                                  <b>
                                    authorization.registration.formField.firstName.label
                                  </b>
                                }
                                name="firstName"
                                rules={
                                  Array [
                                    Object {
                                      "message": "authorization.registration.formField.firstName.error.required",
                                      "required": true,
                                    },
                                    Object {
                                      "message": "authorization.registration.formField.firstName.error.spacing",
                                      "whitespace": true,
                                    },
                                    Object {
                                      "message": "authorization.registration.formField.firstName.error.symbols",
                                      "pattern": /\\^\\[А-яЁёA-z\\]\\+\\$/g,
                                    },
                                    Object {
                                      "max": 50,
                                      "message": "authorization.registration.formField.firstName.error.length",
                                      "min": 2,
                                    },
                                  ]
                                }
                              >
                                <WrapperField
                                  className="user-auth__field "
                                  label={
                                    <b>
                                      authorization.registration.formField.firstName.label
                                    </b>
                                  }
                                  messageVariables={
                                    Object {
                                      "label": "firstName",
                                    }
                                  }
                                  name="firstName"
                                  onReset={[Function]}
                                  rules={
                                    Array [
                                      Object {
                                        "message": "authorization.registration.formField.firstName.error.required",
                                        "required": true,
                                      },
                                      Object {
                                        "message": "authorization.registration.formField.firstName.error.spacing",
                                        "whitespace": true,
                                      },
                                      Object {
                                        "message": "authorization.registration.formField.firstName.error.symbols",
                                        "pattern": /\\^\\[А-яЁёA-z\\]\\+\\$/g,
                                      },
                                      Object {
                                        "max": 50,
                                        "message": "authorization.registration.formField.firstName.error.length",
                                        "min": 2,
                                      },
                                    ]
                                  }
                                  trigger="onChange"
                                  validateTrigger="onChange"
                                >
                                  <Field
                                    className="user-auth__field "
                                    fieldContext={
                                      Object {
                                        "__INTERNAL__": Object {
                                          "itemRef": [Function],
                                          "name": "formEditDataUser",
                                        },
                                        "getFieldError": [Function],
                                        "getFieldInstance": [Function],
                                        "getFieldValue": [Function],
                                        "getFieldsError": [Function],
                                        "getFieldsValue": [Function],
                                        "getInternalHooks": [Function],
                                        "isFieldTouched": [Function],
                                        "isFieldValidating": [Function],
                                        "isFieldsTouched": [Function],
                                        "isFieldsValidating": [Function],
                                        "resetFields": [Function],
                                        "scrollToField": [Function],
                                        "setFields": [Function],
                                        "setFieldsValue": [Function],
                                        "submit": [Function],
                                        "validateFields": [Function],
                                        "validateTrigger": "onChange",
                                      }
                                    }
                                    key="_firstName"
                                    label={
                                      <b>
                                        authorization.registration.formField.firstName.label
                                      </b>
                                    }
                                    messageVariables={
                                      Object {
                                        "label": "firstName",
                                      }
                                    }
                                    name={
                                      Array [
                                        "firstName",
                                      ]
                                    }
                                    onReset={[Function]}
                                    rules={
                                      Array [
                                        Object {
                                          "message": "authorization.registration.formField.firstName.error.required",
                                          "required": true,
                                        },
                                        Object {
                                          "message": "authorization.registration.formField.firstName.error.spacing",
                                          "whitespace": true,
                                        },
                                        Object {
                                          "message": "authorization.registration.formField.firstName.error.symbols",
                                          "pattern": /\\^\\[А-яЁёA-z\\]\\+\\$/g,
                                        },
                                        Object {
                                          "max": 50,
                                          "message": "authorization.registration.formField.firstName.error.length",
                                          "min": 2,
                                        },
                                      ]
                                    }
                                    trigger="onChange"
                                    validateTrigger="onChange"
                                    valuePropName="value"
                                  >
                                    <Row
                                      className="ant-form-item user-auth__field "
                                      key="row"
                                    >
                                      <div
                                        className="ant-row ant-form-item user-auth__field "
                                        style={Object {}}
                                      >
                                        <FormItemLabel
                                          className="user-auth__field "
                                          htmlFor="formEditDataUser_firstName"
                                          label={
                                            <b>
                                              authorization.registration.formField.firstName.label
                                            </b>
                                          }
                                          name="firstName"
                                          prefixCls="ant-form"
                                          required={true}
                                          requiredMark={true}
                                          rules={
                                            Array [
                                              Object {
                                                "message": "authorization.registration.formField.firstName.error.required",
                                                "required": true,
                                              },
                                              Object {
                                                "message": "authorization.registration.formField.firstName.error.spacing",
                                                "whitespace": true,
                                              },
                                              Object {
                                                "message": "authorization.registration.formField.firstName.error.symbols",
                                                "pattern": /\\^\\[А-яЁёA-z\\]\\+\\$/g,
                                              },
                                              Object {
                                                "max": 50,
                                                "message": "authorization.registration.formField.firstName.error.length",
                                                "min": 2,
                                              },
                                            ]
                                          }
                                        >
                                          <Col
                                            className="ant-form-item-label"
                                          >
                                            <div
                                              className="ant-col ant-form-item-label"
                                              style={Object {}}
                                            >
                                              <label
                                                className="ant-form-item-required"
                                                htmlFor="formEditDataUser_firstName"
                                                title=""
                                              >
                                                <b>
                                                  authorization.registration.formField.firstName.label
                                                </b>
                                              </label>
                                            </div>
                                          </Col>
                                        </FormItemLabel>
                                        <FormItemInput
                                          className="user-auth__field "
                                          errors={Array []}
                                          label={
                                            <b>
                                              authorization.registration.formField.firstName.label
                                            </b>
                                          }
                                          name={
                                            Array [
                                              "firstName",
                                            ]
                                          }
                                          onDomErrorVisibleChange={[Function]}
                                          prefixCls="ant-form"
                                          rules={
                                            Array [
                                              Object {
                                                "message": "authorization.registration.formField.firstName.error.required",
                                                "required": true,
                                              },
                                              Object {
                                                "message": "authorization.registration.formField.firstName.error.spacing",
                                                "whitespace": true,
                                              },
                                              Object {
                                                "message": "authorization.registration.formField.firstName.error.symbols",
                                                "pattern": /\\^\\[А-яЁёA-z\\]\\+\\$/g,
                                              },
                                              Object {
                                                "max": 50,
                                                "message": "authorization.registration.formField.firstName.error.length",
                                                "min": 2,
                                              },
                                            ]
                                          }
                                          status=""
                                          touched={false}
                                          validateStatus=""
                                          validating={false}
                                        >
                                          <Col
                                            className="ant-form-item-control"
                                          >
                                            <div
                                              className="ant-col ant-form-item-control"
                                              style={Object {}}
                                            >
                                              <div
                                                className="ant-form-item-control-input"
                                              >
                                                <div
                                                  className="ant-form-item-control-input-content"
                                                >
                                                  <Component
                                                    update={2}
                                                    value="Oleg"
                                                  >
                                                    <Input
                                                      id="formEditDataUser_firstName"
                                                      onChange={[Function]}
                                                      placeholder="authorization.registration.formField.firstName.placeholder"
                                                      style={
                                                        Object {
                                                          "width": "100%",
                                                        }
                                                      }
                                                      type="text"
                                                      value="Oleg"
                                                    >
                                                      <ClearableLabeledInput
                                                        bordered={true}
                                                        element={
                                                          <input
                                                            className="ant-input"
                                                            id="formEditDataUser_firstName"
                                                            onBlur={[Function]}
                                                            onChange={[Function]}
                                                            onFocus={[Function]}
                                                            onKeyDown={[Function]}
                                                            placeholder="authorization.registration.formField.firstName.placeholder"
                                                            style={
                                                              Object {
                                                                "width": "100%",
                                                              }
                                                            }
                                                            type="text"
                                                            value="Oleg"
                                                          />
                                                        }
                                                        focused={false}
                                                        handleReset={[Function]}
                                                        id="formEditDataUser_firstName"
                                                        inputType="input"
                                                        onChange={[Function]}
                                                        placeholder="authorization.registration.formField.firstName.placeholder"
                                                        prefixCls="ant-input"
                                                        style={
                                                          Object {
                                                            "width": "100%",
                                                          }
                                                        }
                                                        triggerFocus={[Function]}
                                                        type="text"
                                                        value="Oleg"
                                                      >
                                                        <input
                                                          className="ant-input"
                                                          id="formEditDataUser_firstName"
                                                          onBlur={[Function]}
                                                          onChange={[Function]}
                                                          onFocus={[Function]}
                                                          onKeyDown={[Function]}
                                                          placeholder="authorization.registration.formField.firstName.placeholder"
                                                          style={
                                                            Object {
                                                              "width": "100%",
                                                            }
                                                          }
                                                          type="text"
                                                          value="Oleg"
                                                        />
                                                      </ClearableLabeledInput>
                                                    </Input>
                                                  </Component>
                                                </div>
                                              </div>
                                              <ErrorList
                                                errors={Array []}
                                                onDomErrorVisibleChange={[Function]}
                                              >
                                                <CSSMotion
                                                  motionDeadline={500}
                                                  motionName="ant-show-help"
                                                  onLeaveEnd={[Function]}
                                                  visible={false}
                                                >
                                                  <DomWrapper />
                                                </CSSMotion>
                                              </ErrorList>
                                            </div>
                                          </Col>
                                        </FormItemInput>
                                      </div>
                                    </Row>
                                  </Field>
                                </WrapperField>
                              </FormItem>
                              <FormItem
                                className="user-auth__field "
                                label={
                                  <b>
                                    authorization.registration.formField.lastName.label
                                  </b>
                                }
                                name="lastName"
                                rules={
                                  Array [
                                    Object {
                                      "message": "authorization.registration.formField.lastName.error.required",
                                      "required": true,
                                    },
                                    Object {
                                      "message": "authorization.registration.formField.lastName.error.spacing",
                                      "whitespace": true,
                                    },
                                    Object {
                                      "message": "authorization.registration.formField.lastName.error.symbols",
                                      "pattern": /\\^\\[А-яЁёA-z\\]\\+\\$/g,
                                    },
                                    Object {
                                      "max": 50,
                                      "message": "authorization.registration.formField.lastName.error.length",
                                      "min": 2,
                                    },
                                  ]
                                }
                              >
                                <WrapperField
                                  className="user-auth__field "
                                  label={
                                    <b>
                                      authorization.registration.formField.lastName.label
                                    </b>
                                  }
                                  messageVariables={
                                    Object {
                                      "label": "lastName",
                                    }
                                  }
                                  name="lastName"
                                  onReset={[Function]}
                                  rules={
                                    Array [
                                      Object {
                                        "message": "authorization.registration.formField.lastName.error.required",
                                        "required": true,
                                      },
                                      Object {
                                        "message": "authorization.registration.formField.lastName.error.spacing",
                                        "whitespace": true,
                                      },
                                      Object {
                                        "message": "authorization.registration.formField.lastName.error.symbols",
                                        "pattern": /\\^\\[А-яЁёA-z\\]\\+\\$/g,
                                      },
                                      Object {
                                        "max": 50,
                                        "message": "authorization.registration.formField.lastName.error.length",
                                        "min": 2,
                                      },
                                    ]
                                  }
                                  trigger="onChange"
                                  validateTrigger="onChange"
                                >
                                  <Field
                                    className="user-auth__field "
                                    fieldContext={
                                      Object {
                                        "__INTERNAL__": Object {
                                          "itemRef": [Function],
                                          "name": "formEditDataUser",
                                        },
                                        "getFieldError": [Function],
                                        "getFieldInstance": [Function],
                                        "getFieldValue": [Function],
                                        "getFieldsError": [Function],
                                        "getFieldsValue": [Function],
                                        "getInternalHooks": [Function],
                                        "isFieldTouched": [Function],
                                        "isFieldValidating": [Function],
                                        "isFieldsTouched": [Function],
                                        "isFieldsValidating": [Function],
                                        "resetFields": [Function],
                                        "scrollToField": [Function],
                                        "setFields": [Function],
                                        "setFieldsValue": [Function],
                                        "submit": [Function],
                                        "validateFields": [Function],
                                        "validateTrigger": "onChange",
                                      }
                                    }
                                    key="_lastName"
                                    label={
                                      <b>
                                        authorization.registration.formField.lastName.label
                                      </b>
                                    }
                                    messageVariables={
                                      Object {
                                        "label": "lastName",
                                      }
                                    }
                                    name={
                                      Array [
                                        "lastName",
                                      ]
                                    }
                                    onReset={[Function]}
                                    rules={
                                      Array [
                                        Object {
                                          "message": "authorization.registration.formField.lastName.error.required",
                                          "required": true,
                                        },
                                        Object {
                                          "message": "authorization.registration.formField.lastName.error.spacing",
                                          "whitespace": true,
                                        },
                                        Object {
                                          "message": "authorization.registration.formField.lastName.error.symbols",
                                          "pattern": /\\^\\[А-яЁёA-z\\]\\+\\$/g,
                                        },
                                        Object {
                                          "max": 50,
                                          "message": "authorization.registration.formField.lastName.error.length",
                                          "min": 2,
                                        },
                                      ]
                                    }
                                    trigger="onChange"
                                    validateTrigger="onChange"
                                    valuePropName="value"
                                  >
                                    <Row
                                      className="ant-form-item user-auth__field "
                                      key="row"
                                    >
                                      <div
                                        className="ant-row ant-form-item user-auth__field "
                                        style={Object {}}
                                      >
                                        <FormItemLabel
                                          className="user-auth__field "
                                          htmlFor="formEditDataUser_lastName"
                                          label={
                                            <b>
                                              authorization.registration.formField.lastName.label
                                            </b>
                                          }
                                          name="lastName"
                                          prefixCls="ant-form"
                                          required={true}
                                          requiredMark={true}
                                          rules={
                                            Array [
                                              Object {
                                                "message": "authorization.registration.formField.lastName.error.required",
                                                "required": true,
                                              },
                                              Object {
                                                "message": "authorization.registration.formField.lastName.error.spacing",
                                                "whitespace": true,
                                              },
                                              Object {
                                                "message": "authorization.registration.formField.lastName.error.symbols",
                                                "pattern": /\\^\\[А-яЁёA-z\\]\\+\\$/g,
                                              },
                                              Object {
                                                "max": 50,
                                                "message": "authorization.registration.formField.lastName.error.length",
                                                "min": 2,
                                              },
                                            ]
                                          }
                                        >
                                          <Col
                                            className="ant-form-item-label"
                                          >
                                            <div
                                              className="ant-col ant-form-item-label"
                                              style={Object {}}
                                            >
                                              <label
                                                className="ant-form-item-required"
                                                htmlFor="formEditDataUser_lastName"
                                                title=""
                                              >
                                                <b>
                                                  authorization.registration.formField.lastName.label
                                                </b>
                                              </label>
                                            </div>
                                          </Col>
                                        </FormItemLabel>
                                        <FormItemInput
                                          className="user-auth__field "
                                          errors={Array []}
                                          label={
                                            <b>
                                              authorization.registration.formField.lastName.label
                                            </b>
                                          }
                                          name={
                                            Array [
                                              "lastName",
                                            ]
                                          }
                                          onDomErrorVisibleChange={[Function]}
                                          prefixCls="ant-form"
                                          rules={
                                            Array [
                                              Object {
                                                "message": "authorization.registration.formField.lastName.error.required",
                                                "required": true,
                                              },
                                              Object {
                                                "message": "authorization.registration.formField.lastName.error.spacing",
                                                "whitespace": true,
                                              },
                                              Object {
                                                "message": "authorization.registration.formField.lastName.error.symbols",
                                                "pattern": /\\^\\[А-яЁёA-z\\]\\+\\$/g,
                                              },
                                              Object {
                                                "max": 50,
                                                "message": "authorization.registration.formField.lastName.error.length",
                                                "min": 2,
                                              },
                                            ]
                                          }
                                          status=""
                                          touched={false}
                                          validateStatus=""
                                          validating={false}
                                        >
                                          <Col
                                            className="ant-form-item-control"
                                          >
                                            <div
                                              className="ant-col ant-form-item-control"
                                              style={Object {}}
                                            >
                                              <div
                                                className="ant-form-item-control-input"
                                              >
                                                <div
                                                  className="ant-form-item-control-input-content"
                                                >
                                                  <Component
                                                    update={2}
                                                    value="Ivanov"
                                                  >
                                                    <Input
                                                      id="formEditDataUser_lastName"
                                                      onChange={[Function]}
                                                      placeholder="authorization.registration.formField.lastName.placeholder"
                                                      style={
                                                        Object {
                                                          "width": "100%",
                                                        }
                                                      }
                                                      type="text"
                                                      value="Ivanov"
                                                    >
                                                      <ClearableLabeledInput
                                                        bordered={true}
                                                        element={
                                                          <input
                                                            className="ant-input"
                                                            id="formEditDataUser_lastName"
                                                            onBlur={[Function]}
                                                            onChange={[Function]}
                                                            onFocus={[Function]}
                                                            onKeyDown={[Function]}
                                                            placeholder="authorization.registration.formField.lastName.placeholder"
                                                            style={
                                                              Object {
                                                                "width": "100%",
                                                              }
                                                            }
                                                            type="text"
                                                            value="Ivanov"
                                                          />
                                                        }
                                                        focused={false}
                                                        handleReset={[Function]}
                                                        id="formEditDataUser_lastName"
                                                        inputType="input"
                                                        onChange={[Function]}
                                                        placeholder="authorization.registration.formField.lastName.placeholder"
                                                        prefixCls="ant-input"
                                                        style={
                                                          Object {
                                                            "width": "100%",
                                                          }
                                                        }
                                                        triggerFocus={[Function]}
                                                        type="text"
                                                        value="Ivanov"
                                                      >
                                                        <input
                                                          className="ant-input"
                                                          id="formEditDataUser_lastName"
                                                          onBlur={[Function]}
                                                          onChange={[Function]}
                                                          onFocus={[Function]}
                                                          onKeyDown={[Function]}
                                                          placeholder="authorization.registration.formField.lastName.placeholder"
                                                          style={
                                                            Object {
                                                              "width": "100%",
                                                            }
                                                          }
                                                          type="text"
                                                          value="Ivanov"
                                                        />
                                                      </ClearableLabeledInput>
                                                    </Input>
                                                  </Component>
                                                </div>
                                              </div>
                                              <ErrorList
                                                errors={Array []}
                                                onDomErrorVisibleChange={[Function]}
                                              >
                                                <CSSMotion
                                                  motionDeadline={500}
                                                  motionName="ant-show-help"
                                                  onLeaveEnd={[Function]}
                                                  visible={false}
                                                >
                                                  <DomWrapper />
                                                </CSSMotion>
                                              </ErrorList>
                                            </div>
                                          </Col>
                                        </FormItemInput>
                                      </div>
                                    </Row>
                                  </Field>
                                </WrapperField>
                              </FormItem>
                              <FormItem
                                className="
              user-auth__field user-auth__field_inline
              
            "
                                label={
                                  <b>
                                    authorization.registration.formField.gender.label
                                  </b>
                                }
                                name="gender"
                                rules={
                                  Array [
                                    Object {
                                      "message": "authorization.registration.formField.gender.error.required",
                                      "required": true,
                                    },
                                  ]
                                }
                              >
                                <WrapperField
                                  className="
              user-auth__field user-auth__field_inline
              
            "
                                  label={
                                    <b>
                                      authorization.registration.formField.gender.label
                                    </b>
                                  }
                                  messageVariables={
                                    Object {
                                      "label": "gender",
                                    }
                                  }
                                  name="gender"
                                  onReset={[Function]}
                                  rules={
                                    Array [
                                      Object {
                                        "message": "authorization.registration.formField.gender.error.required",
                                        "required": true,
                                      },
                                    ]
                                  }
                                  trigger="onChange"
                                  validateTrigger="onChange"
                                >
                                  <Field
                                    className="
              user-auth__field user-auth__field_inline
              
            "
                                    fieldContext={
                                      Object {
                                        "__INTERNAL__": Object {
                                          "itemRef": [Function],
                                          "name": "formEditDataUser",
                                        },
                                        "getFieldError": [Function],
                                        "getFieldInstance": [Function],
                                        "getFieldValue": [Function],
                                        "getFieldsError": [Function],
                                        "getFieldsValue": [Function],
                                        "getInternalHooks": [Function],
                                        "isFieldTouched": [Function],
                                        "isFieldValidating": [Function],
                                        "isFieldsTouched": [Function],
                                        "isFieldsValidating": [Function],
                                        "resetFields": [Function],
                                        "scrollToField": [Function],
                                        "setFields": [Function],
                                        "setFieldsValue": [Function],
                                        "submit": [Function],
                                        "validateFields": [Function],
                                        "validateTrigger": "onChange",
                                      }
                                    }
                                    key="_gender"
                                    label={
                                      <b>
                                        authorization.registration.formField.gender.label
                                      </b>
                                    }
                                    messageVariables={
                                      Object {
                                        "label": "gender",
                                      }
                                    }
                                    name={
                                      Array [
                                        "gender",
                                      ]
                                    }
                                    onReset={[Function]}
                                    rules={
                                      Array [
                                        Object {
                                          "message": "authorization.registration.formField.gender.error.required",
                                          "required": true,
                                        },
                                      ]
                                    }
                                    trigger="onChange"
                                    validateTrigger="onChange"
                                    valuePropName="value"
                                  >
                                    <Row
                                      className="ant-form-item 
              user-auth__field user-auth__field_inline
              
            "
                                      key="row"
                                    >
                                      <div
                                        className="ant-row ant-form-item 
              user-auth__field user-auth__field_inline
              
            "
                                        style={Object {}}
                                      >
                                        <FormItemLabel
                                          className="
              user-auth__field user-auth__field_inline
              
            "
                                          htmlFor="formEditDataUser_gender"
                                          label={
                                            <b>
                                              authorization.registration.formField.gender.label
                                            </b>
                                          }
                                          name="gender"
                                          prefixCls="ant-form"
                                          required={true}
                                          requiredMark={true}
                                          rules={
                                            Array [
                                              Object {
                                                "message": "authorization.registration.formField.gender.error.required",
                                                "required": true,
                                              },
                                            ]
                                          }
                                        >
                                          <Col
                                            className="ant-form-item-label"
                                          >
                                            <div
                                              className="ant-col ant-form-item-label"
                                              style={Object {}}
                                            >
                                              <label
                                                className="ant-form-item-required"
                                                htmlFor="formEditDataUser_gender"
                                                title=""
                                              >
                                                <b>
                                                  authorization.registration.formField.gender.label
                                                </b>
                                              </label>
                                            </div>
                                          </Col>
                                        </FormItemLabel>
                                        <FormItemInput
                                          className="
              user-auth__field user-auth__field_inline
              
            "
                                          errors={Array []}
                                          label={
                                            <b>
                                              authorization.registration.formField.gender.label
                                            </b>
                                          }
                                          name={
                                            Array [
                                              "gender",
                                            ]
                                          }
                                          onDomErrorVisibleChange={[Function]}
                                          prefixCls="ant-form"
                                          rules={
                                            Array [
                                              Object {
                                                "message": "authorization.registration.formField.gender.error.required",
                                                "required": true,
                                              },
                                            ]
                                          }
                                          status=""
                                          touched={false}
                                          validateStatus=""
                                          validating={false}
                                        >
                                          <Col
                                            className="ant-form-item-control"
                                          >
                                            <div
                                              className="ant-col ant-form-item-control"
                                              style={Object {}}
                                            >
                                              <div
                                                className="ant-form-item-control-input"
                                              >
                                                <div
                                                  className="ant-form-item-control-input-content"
                                                >
                                                  <Component
                                                    update={2}
                                                    value="male"
                                                  >
                                                    <ForwardRef
                                                      id="formEditDataUser_gender"
                                                      onChange={[Function]}
                                                      value="male"
                                                    >
                                                      <div
                                                        className="ant-radio-group ant-radio-group-outline"
                                                        id="formEditDataUser_gender"
                                                      >
                                                        <Radio
                                                          type="radio"
                                                          value="male"
                                                        >
                                                          <label
                                                            className="ant-radio-wrapper ant-radio-wrapper-checked"
                                                          >
                                                            <Checkbox
                                                              checked={true}
                                                              className=""
                                                              defaultChecked={false}
                                                              onBlur={[Function]}
                                                              onChange={[Function]}
                                                              onFocus={[Function]}
                                                              onKeyDown={[Function]}
                                                              onKeyPress={[Function]}
                                                              onKeyUp={[Function]}
                                                              prefixCls="ant-radio"
                                                              style={Object {}}
                                                              type="radio"
                                                              value="male"
                                                            >
                                                              <span
                                                                className="ant-radio ant-radio-checked"
                                                                style={Object {}}
                                                              >
                                                                <input
                                                                  checked={true}
                                                                  className="ant-radio-input"
                                                                  onBlur={[Function]}
                                                                  onChange={[Function]}
                                                                  onFocus={[Function]}
                                                                  onKeyDown={[Function]}
                                                                  onKeyPress={[Function]}
                                                                  onKeyUp={[Function]}
                                                                  type="radio"
                                                                  value="male"
                                                                />
                                                                <span
                                                                  className="ant-radio-inner"
                                                                />
                                                              </span>
                                                            </Checkbox>
                                                            <span>
                                                              authorization.registration.formField.gender.radioText.male
                                                            </span>
                                                          </label>
                                                        </Radio>
                                                        <Radio
                                                          type="radio"
                                                          value="female"
                                                        >
                                                          <label
                                                            className="ant-radio-wrapper"
                                                          >
                                                            <Checkbox
                                                              checked={false}
                                                              className=""
                                                              defaultChecked={false}
                                                              onBlur={[Function]}
                                                              onChange={[Function]}
                                                              onFocus={[Function]}
                                                              onKeyDown={[Function]}
                                                              onKeyPress={[Function]}
                                                              onKeyUp={[Function]}
                                                              prefixCls="ant-radio"
                                                              style={Object {}}
                                                              type="radio"
                                                              value="female"
                                                            >
                                                              <span
                                                                className="ant-radio"
                                                                style={Object {}}
                                                              >
                                                                <input
                                                                  checked={false}
                                                                  className="ant-radio-input"
                                                                  onBlur={[Function]}
                                                                  onChange={[Function]}
                                                                  onFocus={[Function]}
                                                                  onKeyDown={[Function]}
                                                                  onKeyPress={[Function]}
                                                                  onKeyUp={[Function]}
                                                                  type="radio"
                                                                  value="female"
                                                                />
                                                                <span
                                                                  className="ant-radio-inner"
                                                                />
                                                              </span>
                                                            </Checkbox>
                                                            <span>
                                                              authorization.registration.formField.gender.radioText.female
                                                            </span>
                                                          </label>
                                                        </Radio>
                                                      </div>
                                                    </ForwardRef>
                                                  </Component>
                                                </div>
                                              </div>
                                              <ErrorList
                                                errors={Array []}
                                                onDomErrorVisibleChange={[Function]}
                                              >
                                                <CSSMotion
                                                  motionDeadline={500}
                                                  motionName="ant-show-help"
                                                  onLeaveEnd={[Function]}
                                                  visible={false}
                                                >
                                                  <DomWrapper />
                                                </CSSMotion>
                                              </ErrorList>
                                            </div>
                                          </Col>
                                        </FormItemInput>
                                      </div>
                                    </Row>
                                  </Field>
                                </WrapperField>
                              </FormItem>
                              <FormItem
                                className="user-auth__field "
                                label={
                                  <b>
                                    authorization.registration.formField.dateOfBirth.label
                                  </b>
                                }
                                name="dateOfBirth"
                                rules={
                                  Array [
                                    Object {
                                      "message": "authorization.registration.formField.dateOfBirth.error.required",
                                      "required": true,
                                    },
                                  ]
                                }
                              >
                                <WrapperField
                                  className="user-auth__field "
                                  label={
                                    <b>
                                      authorization.registration.formField.dateOfBirth.label
                                    </b>
                                  }
                                  messageVariables={
                                    Object {
                                      "label": "dateOfBirth",
                                    }
                                  }
                                  name="dateOfBirth"
                                  onReset={[Function]}
                                  rules={
                                    Array [
                                      Object {
                                        "message": "authorization.registration.formField.dateOfBirth.error.required",
                                        "required": true,
                                      },
                                    ]
                                  }
                                  trigger="onChange"
                                  validateTrigger="onChange"
                                >
                                  <Field
                                    className="user-auth__field "
                                    fieldContext={
                                      Object {
                                        "__INTERNAL__": Object {
                                          "itemRef": [Function],
                                          "name": "formEditDataUser",
                                        },
                                        "getFieldError": [Function],
                                        "getFieldInstance": [Function],
                                        "getFieldValue": [Function],
                                        "getFieldsError": [Function],
                                        "getFieldsValue": [Function],
                                        "getInternalHooks": [Function],
                                        "isFieldTouched": [Function],
                                        "isFieldValidating": [Function],
                                        "isFieldsTouched": [Function],
                                        "isFieldsValidating": [Function],
                                        "resetFields": [Function],
                                        "scrollToField": [Function],
                                        "setFields": [Function],
                                        "setFieldsValue": [Function],
                                        "submit": [Function],
                                        "validateFields": [Function],
                                        "validateTrigger": "onChange",
                                      }
                                    }
                                    key="_dateOfBirth"
                                    label={
                                      <b>
                                        authorization.registration.formField.dateOfBirth.label
                                      </b>
                                    }
                                    messageVariables={
                                      Object {
                                        "label": "dateOfBirth",
                                      }
                                    }
                                    name={
                                      Array [
                                        "dateOfBirth",
                                      ]
                                    }
                                    onReset={[Function]}
                                    rules={
                                      Array [
                                        Object {
                                          "message": "authorization.registration.formField.dateOfBirth.error.required",
                                          "required": true,
                                        },
                                      ]
                                    }
                                    trigger="onChange"
                                    validateTrigger="onChange"
                                    valuePropName="value"
                                  >
                                    <Row
                                      className="ant-form-item user-auth__field "
                                      key="row"
                                    >
                                      <div
                                        className="ant-row ant-form-item user-auth__field "
                                        style={Object {}}
                                      >
                                        <FormItemLabel
                                          className="user-auth__field "
                                          htmlFor="formEditDataUser_dateOfBirth"
                                          label={
                                            <b>
                                              authorization.registration.formField.dateOfBirth.label
                                            </b>
                                          }
                                          name="dateOfBirth"
                                          prefixCls="ant-form"
                                          required={true}
                                          requiredMark={true}
                                          rules={
                                            Array [
                                              Object {
                                                "message": "authorization.registration.formField.dateOfBirth.error.required",
                                                "required": true,
                                              },
                                            ]
                                          }
                                        >
                                          <Col
                                            className="ant-form-item-label"
                                          >
                                            <div
                                              className="ant-col ant-form-item-label"
                                              style={Object {}}
                                            >
                                              <label
                                                className="ant-form-item-required"
                                                htmlFor="formEditDataUser_dateOfBirth"
                                                title=""
                                              >
                                                <b>
                                                  authorization.registration.formField.dateOfBirth.label
                                                </b>
                                              </label>
                                            </div>
                                          </Col>
                                        </FormItemLabel>
                                        <FormItemInput
                                          className="user-auth__field "
                                          errors={Array []}
                                          label={
                                            <b>
                                              authorization.registration.formField.dateOfBirth.label
                                            </b>
                                          }
                                          name={
                                            Array [
                                              "dateOfBirth",
                                            ]
                                          }
                                          onDomErrorVisibleChange={[Function]}
                                          prefixCls="ant-form"
                                          rules={
                                            Array [
                                              Object {
                                                "message": "authorization.registration.formField.dateOfBirth.error.required",
                                                "required": true,
                                              },
                                            ]
                                          }
                                          status=""
                                          touched={false}
                                          validateStatus=""
                                          validating={false}
                                        >
                                          <Col
                                            className="ant-form-item-control"
                                          >
                                            <div
                                              className="ant-col ant-form-item-control"
                                              style={Object {}}
                                            >
                                              <div
                                                className="ant-form-item-control-input"
                                              >
                                                <div
                                                  className="ant-form-item-control-input-content"
                                                >
                                                  <Component
                                                    update={2}
                                                  >
                                                    <Picker
                                                      defaultPickerValue={"2005-12-21T20:26:28.436Z"}
                                                      disabledDate={[Function]}
                                                      format="DD.MM.YYYY"
                                                      id="formEditDataUser_dateOfBirth"
                                                      onChange={[Function]}
                                                      picker="date"
                                                      placeholder="authorization.registration.formField.dateOfBirth.placeholder"
                                                      style={
                                                        Object {
                                                          "width": "100%",
                                                        }
                                                      }
                                                    >
                                                      <LocaleReceiver
                                                        componentName="DatePicker"
                                                        defaultLocale={
                                                          Object {
                                                            "lang": Object {
                                                              "backToToday": "Back to today",
                                                              "clear": "Clear",
                                                              "dateFormat": "M/D/YYYY",
                                                              "dateSelect": "select date",
                                                              "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                              "dayFormat": "D",
                                                              "decadeSelect": "Choose a decade",
                                                              "locale": "en_US",
                                                              "month": "Month",
                                                              "monthBeforeYear": true,
                                                              "monthPlaceholder": "Select month",
                                                              "monthSelect": "Choose a month",
                                                              "nextCentury": "Next century",
                                                              "nextDecade": "Next decade",
                                                              "nextMonth": "Next month (PageDown)",
                                                              "nextYear": "Next year (Control + right)",
                                                              "now": "Now",
                                                              "ok": "Ok",
                                                              "placeholder": "Select date",
                                                              "previousCentury": "Last century",
                                                              "previousDecade": "Last decade",
                                                              "previousMonth": "Previous month (PageUp)",
                                                              "previousYear": "Last year (Control + left)",
                                                              "quarterPlaceholder": "Select quarter",
                                                              "rangeMonthPlaceholder": Array [
                                                                "Start month",
                                                                "End month",
                                                              ],
                                                              "rangePlaceholder": Array [
                                                                "Start date",
                                                                "End date",
                                                              ],
                                                              "rangeWeekPlaceholder": Array [
                                                                "Start week",
                                                                "End week",
                                                              ],
                                                              "rangeYearPlaceholder": Array [
                                                                "Start year",
                                                                "End year",
                                                              ],
                                                              "timeSelect": "select time",
                                                              "today": "Today",
                                                              "weekPlaceholder": "Select week",
                                                              "weekSelect": "Choose a week",
                                                              "year": "Year",
                                                              "yearFormat": "YYYY",
                                                              "yearPlaceholder": "Select year",
                                                              "yearSelect": "Choose a year",
                                                            },
                                                            "timePickerLocale": Object {
                                                              "placeholder": "Select time",
                                                              "rangePlaceholder": Array [
                                                                "Start time",
                                                                "End time",
                                                              ],
                                                            },
                                                          }
                                                        }
                                                      >
                                                        <Picker
                                                          allowClear={true}
                                                          className=""
                                                          clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                          components={
                                                            Object {
                                                              "button": [Function],
                                                              "rangeItem": [Function],
                                                            }
                                                          }
                                                          defaultPickerValue={"2005-12-21T20:26:28.436Z"}
                                                          disabledDate={[Function]}
                                                          format="DD.MM.YYYY"
                                                          generateConfig={
                                                            Object {
                                                              "addDate": [Function],
                                                              "addMonth": [Function],
                                                              "addYear": [Function],
                                                              "getDate": [Function],
                                                              "getEndDate": [Function],
                                                              "getFixedDate": [Function],
                                                              "getHour": [Function],
                                                              "getMinute": [Function],
                                                              "getMonth": [Function],
                                                              "getNow": [Function],
                                                              "getSecond": [Function],
                                                              "getWeekDay": [Function],
                                                              "getYear": [Function],
                                                              "isAfter": [Function],
                                                              "isValidate": [Function],
                                                              "locale": Object {
                                                                "format": [Function],
                                                                "getShortMonths": [Function],
                                                                "getShortWeekDays": [Function],
                                                                "getWeek": [Function],
                                                                "getWeekFirstDate": [Function],
                                                                "getWeekFirstDay": [Function],
                                                                "parse": [Function],
                                                              },
                                                              "setDate": [Function],
                                                              "setHour": [Function],
                                                              "setMinute": [Function],
                                                              "setMonth": [Function],
                                                              "setSecond": [Function],
                                                              "setYear": [Function],
                                                            }
                                                          }
                                                          id="formEditDataUser_dateOfBirth"
                                                          locale={
                                                            Object {
                                                              "backToToday": "Back to today",
                                                              "clear": "Clear",
                                                              "dateFormat": "M/D/YYYY",
                                                              "dateSelect": "select date",
                                                              "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                              "dayFormat": "D",
                                                              "decadeSelect": "Choose a decade",
                                                              "locale": "en_US",
                                                              "month": "Month",
                                                              "monthBeforeYear": true,
                                                              "monthPlaceholder": "Select month",
                                                              "monthSelect": "Choose a month",
                                                              "nextCentury": "Next century",
                                                              "nextDecade": "Next decade",
                                                              "nextMonth": "Next month (PageDown)",
                                                              "nextYear": "Next year (Control + right)",
                                                              "now": "Now",
                                                              "ok": "Ok",
                                                              "placeholder": "Select date",
                                                              "previousCentury": "Last century",
                                                              "previousDecade": "Last decade",
                                                              "previousMonth": "Previous month (PageUp)",
                                                              "previousYear": "Last year (Control + left)",
                                                              "quarterPlaceholder": "Select quarter",
                                                              "rangeMonthPlaceholder": Array [
                                                                "Start month",
                                                                "End month",
                                                              ],
                                                              "rangePlaceholder": Array [
                                                                "Start date",
                                                                "End date",
                                                              ],
                                                              "rangeWeekPlaceholder": Array [
                                                                "Start week",
                                                                "End week",
                                                              ],
                                                              "rangeYearPlaceholder": Array [
                                                                "Start year",
                                                                "End year",
                                                              ],
                                                              "timeSelect": "select time",
                                                              "today": "Today",
                                                              "weekPlaceholder": "Select week",
                                                              "weekSelect": "Choose a week",
                                                              "year": "Year",
                                                              "yearFormat": "YYYY",
                                                              "yearPlaceholder": "Select year",
                                                              "yearSelect": "Choose a year",
                                                            }
                                                          }
                                                          nextIcon={
                                                            <span
                                                              className="ant-picker-next-icon"
                                                            />
                                                          }
                                                          onChange={[Function]}
                                                          picker="date"
                                                          placeholder="authorization.registration.formField.dateOfBirth.placeholder"
                                                          prefixCls="ant-picker"
                                                          prevIcon={
                                                            <span
                                                              className="ant-picker-prev-icon"
                                                            />
                                                          }
                                                          showToday={true}
                                                          style={
                                                            Object {
                                                              "width": "100%",
                                                            }
                                                          }
                                                          suffixIcon={<ForwardRef(CalendarOutlined) />}
                                                          superNextIcon={
                                                            <span
                                                              className="ant-picker-super-next-icon"
                                                            />
                                                          }
                                                          superPrevIcon={
                                                            <span
                                                              className="ant-picker-super-prev-icon"
                                                            />
                                                          }
                                                          transitionName="ant-slide-up"
                                                        >
                                                          <InnerPicker
                                                            allowClear={true}
                                                            className=""
                                                            clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                            components={
                                                              Object {
                                                                "button": [Function],
                                                                "rangeItem": [Function],
                                                              }
                                                            }
                                                            defaultPickerValue={"2005-12-21T20:26:28.436Z"}
                                                            disabledDate={[Function]}
                                                            format="DD.MM.YYYY"
                                                            generateConfig={
                                                              Object {
                                                                "addDate": [Function],
                                                                "addMonth": [Function],
                                                                "addYear": [Function],
                                                                "getDate": [Function],
                                                                "getEndDate": [Function],
                                                                "getFixedDate": [Function],
                                                                "getHour": [Function],
                                                                "getMinute": [Function],
                                                                "getMonth": [Function],
                                                                "getNow": [Function],
                                                                "getSecond": [Function],
                                                                "getWeekDay": [Function],
                                                                "getYear": [Function],
                                                                "isAfter": [Function],
                                                                "isValidate": [Function],
                                                                "locale": Object {
                                                                  "format": [Function],
                                                                  "getShortMonths": [Function],
                                                                  "getShortWeekDays": [Function],
                                                                  "getWeek": [Function],
                                                                  "getWeekFirstDate": [Function],
                                                                  "getWeekFirstDay": [Function],
                                                                  "parse": [Function],
                                                                },
                                                                "setDate": [Function],
                                                                "setHour": [Function],
                                                                "setMinute": [Function],
                                                                "setMonth": [Function],
                                                                "setSecond": [Function],
                                                                "setYear": [Function],
                                                              }
                                                            }
                                                            id="formEditDataUser_dateOfBirth"
                                                            locale={
                                                              Object {
                                                                "backToToday": "Back to today",
                                                                "clear": "Clear",
                                                                "dateFormat": "M/D/YYYY",
                                                                "dateSelect": "select date",
                                                                "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                                "dayFormat": "D",
                                                                "decadeSelect": "Choose a decade",
                                                                "locale": "en_US",
                                                                "month": "Month",
                                                                "monthBeforeYear": true,
                                                                "monthPlaceholder": "Select month",
                                                                "monthSelect": "Choose a month",
                                                                "nextCentury": "Next century",
                                                                "nextDecade": "Next decade",
                                                                "nextMonth": "Next month (PageDown)",
                                                                "nextYear": "Next year (Control + right)",
                                                                "now": "Now",
                                                                "ok": "Ok",
                                                                "placeholder": "Select date",
                                                                "previousCentury": "Last century",
                                                                "previousDecade": "Last decade",
                                                                "previousMonth": "Previous month (PageUp)",
                                                                "previousYear": "Last year (Control + left)",
                                                                "quarterPlaceholder": "Select quarter",
                                                                "rangeMonthPlaceholder": Array [
                                                                  "Start month",
                                                                  "End month",
                                                                ],
                                                                "rangePlaceholder": Array [
                                                                  "Start date",
                                                                  "End date",
                                                                ],
                                                                "rangeWeekPlaceholder": Array [
                                                                  "Start week",
                                                                  "End week",
                                                                ],
                                                                "rangeYearPlaceholder": Array [
                                                                  "Start year",
                                                                  "End year",
                                                                ],
                                                                "timeSelect": "select time",
                                                                "today": "Today",
                                                                "weekPlaceholder": "Select week",
                                                                "weekSelect": "Choose a week",
                                                                "year": "Year",
                                                                "yearFormat": "YYYY",
                                                                "yearPlaceholder": "Select year",
                                                                "yearSelect": "Choose a year",
                                                              }
                                                            }
                                                            nextIcon={
                                                              <span
                                                                className="ant-picker-next-icon"
                                                              />
                                                            }
                                                            onChange={[Function]}
                                                            picker="date"
                                                            pickerRef={
                                                              Object {
                                                                "current": Object {
                                                                  "blur": [Function],
                                                                  "focus": [Function],
                                                                },
                                                              }
                                                            }
                                                            placeholder="authorization.registration.formField.dateOfBirth.placeholder"
                                                            prefixCls="ant-picker"
                                                            prevIcon={
                                                              <span
                                                                className="ant-picker-prev-icon"
                                                              />
                                                            }
                                                            showToday={true}
                                                            style={
                                                              Object {
                                                                "width": "100%",
                                                              }
                                                            }
                                                            suffixIcon={<ForwardRef(CalendarOutlined) />}
                                                            superNextIcon={
                                                              <span
                                                                className="ant-picker-super-next-icon"
                                                              />
                                                            }
                                                            superPrevIcon={
                                                              <span
                                                                className="ant-picker-super-prev-icon"
                                                              />
                                                            }
                                                            transitionName="ant-slide-up"
                                                          >
                                                            <PickerTrigger
                                                              popupElement={
                                                                <div
                                                                  className="ant-picker-panel-container"
                                                                  onMouseDown={[Function]}
                                                                >
                                                                  <PickerPanel
                                                                    allowClear={true}
                                                                    className="ant-picker-panel-focused"
                                                                    clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                                    components={
                                                                      Object {
                                                                        "button": [Function],
                                                                        "rangeItem": [Function],
                                                                      }
                                                                    }
                                                                    defaultPickerValue={"2005-12-21T20:26:28.436Z"}
                                                                    disabledDate={[Function]}
                                                                    format="DD.MM.YYYY"
                                                                    generateConfig={
                                                                      Object {
                                                                        "addDate": [Function],
                                                                        "addMonth": [Function],
                                                                        "addYear": [Function],
                                                                        "getDate": [Function],
                                                                        "getEndDate": [Function],
                                                                        "getFixedDate": [Function],
                                                                        "getHour": [Function],
                                                                        "getMinute": [Function],
                                                                        "getMonth": [Function],
                                                                        "getNow": [Function],
                                                                        "getSecond": [Function],
                                                                        "getWeekDay": [Function],
                                                                        "getYear": [Function],
                                                                        "isAfter": [Function],
                                                                        "isValidate": [Function],
                                                                        "locale": Object {
                                                                          "format": [Function],
                                                                          "getShortMonths": [Function],
                                                                          "getShortWeekDays": [Function],
                                                                          "getWeek": [Function],
                                                                          "getWeekFirstDate": [Function],
                                                                          "getWeekFirstDay": [Function],
                                                                          "parse": [Function],
                                                                        },
                                                                        "setDate": [Function],
                                                                        "setHour": [Function],
                                                                        "setMinute": [Function],
                                                                        "setMonth": [Function],
                                                                        "setSecond": [Function],
                                                                        "setYear": [Function],
                                                                      }
                                                                    }
                                                                    id="formEditDataUser_dateOfBirth"
                                                                    locale={
                                                                      Object {
                                                                        "backToToday": "Back to today",
                                                                        "clear": "Clear",
                                                                        "dateFormat": "M/D/YYYY",
                                                                        "dateSelect": "select date",
                                                                        "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                                        "dayFormat": "D",
                                                                        "decadeSelect": "Choose a decade",
                                                                        "locale": "en_US",
                                                                        "month": "Month",
                                                                        "monthBeforeYear": true,
                                                                        "monthPlaceholder": "Select month",
                                                                        "monthSelect": "Choose a month",
                                                                        "nextCentury": "Next century",
                                                                        "nextDecade": "Next decade",
                                                                        "nextMonth": "Next month (PageDown)",
                                                                        "nextYear": "Next year (Control + right)",
                                                                        "now": "Now",
                                                                        "ok": "Ok",
                                                                        "placeholder": "Select date",
                                                                        "previousCentury": "Last century",
                                                                        "previousDecade": "Last decade",
                                                                        "previousMonth": "Previous month (PageUp)",
                                                                        "previousYear": "Last year (Control + left)",
                                                                        "quarterPlaceholder": "Select quarter",
                                                                        "rangeMonthPlaceholder": Array [
                                                                          "Start month",
                                                                          "End month",
                                                                        ],
                                                                        "rangePlaceholder": Array [
                                                                          "Start date",
                                                                          "End date",
                                                                        ],
                                                                        "rangeWeekPlaceholder": Array [
                                                                          "Start week",
                                                                          "End week",
                                                                        ],
                                                                        "rangeYearPlaceholder": Array [
                                                                          "Start year",
                                                                          "End year",
                                                                        ],
                                                                        "timeSelect": "select time",
                                                                        "today": "Today",
                                                                        "weekPlaceholder": "Select week",
                                                                        "weekSelect": "Choose a week",
                                                                        "year": "Year",
                                                                        "yearFormat": "YYYY",
                                                                        "yearPlaceholder": "Select year",
                                                                        "yearSelect": "Choose a year",
                                                                      }
                                                                    }
                                                                    nextIcon={
                                                                      <span
                                                                        className="ant-picker-next-icon"
                                                                      />
                                                                    }
                                                                    onChange={null}
                                                                    onPanelChange={[Function]}
                                                                    onSelect={[Function]}
                                                                    picker="date"
                                                                    pickerRef={
                                                                      Object {
                                                                        "current": Object {
                                                                          "blur": [Function],
                                                                          "focus": [Function],
                                                                        },
                                                                      }
                                                                    }
                                                                    placeholder="authorization.registration.formField.dateOfBirth.placeholder"
                                                                    prefixCls="ant-picker"
                                                                    prevIcon={
                                                                      <span
                                                                        className="ant-picker-prev-icon"
                                                                      />
                                                                    }
                                                                    showToday={true}
                                                                    suffixIcon={<ForwardRef(CalendarOutlined) />}
                                                                    superNextIcon={
                                                                      <span
                                                                        className="ant-picker-super-next-icon"
                                                                      />
                                                                    }
                                                                    superPrevIcon={
                                                                      <span
                                                                        className="ant-picker-super-prev-icon"
                                                                      />
                                                                    }
                                                                    tabIndex={-1}
                                                                    transitionName="ant-slide-up"
                                                                    value={null}
                                                                  />
                                                                </div>
                                                              }
                                                              popupPlacement="bottomLeft"
                                                              prefixCls="ant-picker"
                                                              transitionName="ant-slide-up"
                                                              visible={false}
                                                            >
                                                              <Trigger
                                                                action={Array []}
                                                                afterPopupVisibleChange={[Function]}
                                                                autoDestroy={false}
                                                                blurDelay={0.15}
                                                                builtinPlacements={
                                                                  Object {
                                                                    "bottomLeft": Object {
                                                                      "offset": Array [
                                                                        0,
                                                                        4,
                                                                      ],
                                                                      "overflow": Object {
                                                                        "adjustX": 1,
                                                                        "adjustY": 1,
                                                                      },
                                                                      "points": Array [
                                                                        "tl",
                                                                        "bl",
                                                                      ],
                                                                    },
                                                                    "bottomRight": Object {
                                                                      "offset": Array [
                                                                        0,
                                                                        4,
                                                                      ],
                                                                      "overflow": Object {
                                                                        "adjustX": 1,
                                                                        "adjustY": 1,
                                                                      },
                                                                      "points": Array [
                                                                        "tr",
                                                                        "br",
                                                                      ],
                                                                    },
                                                                    "topLeft": Object {
                                                                      "offset": Array [
                                                                        0,
                                                                        -4,
                                                                      ],
                                                                      "overflow": Object {
                                                                        "adjustX": 0,
                                                                        "adjustY": 1,
                                                                      },
                                                                      "points": Array [
                                                                        "bl",
                                                                        "tl",
                                                                      ],
                                                                    },
                                                                    "topRight": Object {
                                                                      "offset": Array [
                                                                        0,
                                                                        -4,
                                                                      ],
                                                                      "overflow": Object {
                                                                        "adjustX": 0,
                                                                        "adjustY": 1,
                                                                      },
                                                                      "points": Array [
                                                                        "br",
                                                                        "tr",
                                                                      ],
                                                                    },
                                                                  }
                                                                }
                                                                defaultPopupVisible={false}
                                                                destroyPopupOnHide={false}
                                                                focusDelay={0}
                                                                getDocument={[Function]}
                                                                getPopupClassNameFromAlign={[Function]}
                                                                hideAction={Array []}
                                                                mask={false}
                                                                maskClosable={true}
                                                                mouseEnterDelay={0}
                                                                mouseLeaveDelay={0.1}
                                                                onPopupAlign={[Function]}
                                                                onPopupVisibleChange={[Function]}
                                                                popup={
                                                                  <div
                                                                    className="ant-picker-panel-container"
                                                                    onMouseDown={[Function]}
                                                                  >
                                                                    <PickerPanel
                                                                      allowClear={true}
                                                                      className="ant-picker-panel-focused"
                                                                      clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                                      components={
                                                                        Object {
                                                                          "button": [Function],
                                                                          "rangeItem": [Function],
                                                                        }
                                                                      }
                                                                      defaultPickerValue={"2005-12-21T20:26:28.436Z"}
                                                                      disabledDate={[Function]}
                                                                      format="DD.MM.YYYY"
                                                                      generateConfig={
                                                                        Object {
                                                                          "addDate": [Function],
                                                                          "addMonth": [Function],
                                                                          "addYear": [Function],
                                                                          "getDate": [Function],
                                                                          "getEndDate": [Function],
                                                                          "getFixedDate": [Function],
                                                                          "getHour": [Function],
                                                                          "getMinute": [Function],
                                                                          "getMonth": [Function],
                                                                          "getNow": [Function],
                                                                          "getSecond": [Function],
                                                                          "getWeekDay": [Function],
                                                                          "getYear": [Function],
                                                                          "isAfter": [Function],
                                                                          "isValidate": [Function],
                                                                          "locale": Object {
                                                                            "format": [Function],
                                                                            "getShortMonths": [Function],
                                                                            "getShortWeekDays": [Function],
                                                                            "getWeek": [Function],
                                                                            "getWeekFirstDate": [Function],
                                                                            "getWeekFirstDay": [Function],
                                                                            "parse": [Function],
                                                                          },
                                                                          "setDate": [Function],
                                                                          "setHour": [Function],
                                                                          "setMinute": [Function],
                                                                          "setMonth": [Function],
                                                                          "setSecond": [Function],
                                                                          "setYear": [Function],
                                                                        }
                                                                      }
                                                                      id="formEditDataUser_dateOfBirth"
                                                                      locale={
                                                                        Object {
                                                                          "backToToday": "Back to today",
                                                                          "clear": "Clear",
                                                                          "dateFormat": "M/D/YYYY",
                                                                          "dateSelect": "select date",
                                                                          "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                                          "dayFormat": "D",
                                                                          "decadeSelect": "Choose a decade",
                                                                          "locale": "en_US",
                                                                          "month": "Month",
                                                                          "monthBeforeYear": true,
                                                                          "monthPlaceholder": "Select month",
                                                                          "monthSelect": "Choose a month",
                                                                          "nextCentury": "Next century",
                                                                          "nextDecade": "Next decade",
                                                                          "nextMonth": "Next month (PageDown)",
                                                                          "nextYear": "Next year (Control + right)",
                                                                          "now": "Now",
                                                                          "ok": "Ok",
                                                                          "placeholder": "Select date",
                                                                          "previousCentury": "Last century",
                                                                          "previousDecade": "Last decade",
                                                                          "previousMonth": "Previous month (PageUp)",
                                                                          "previousYear": "Last year (Control + left)",
                                                                          "quarterPlaceholder": "Select quarter",
                                                                          "rangeMonthPlaceholder": Array [
                                                                            "Start month",
                                                                            "End month",
                                                                          ],
                                                                          "rangePlaceholder": Array [
                                                                            "Start date",
                                                                            "End date",
                                                                          ],
                                                                          "rangeWeekPlaceholder": Array [
                                                                            "Start week",
                                                                            "End week",
                                                                          ],
                                                                          "rangeYearPlaceholder": Array [
                                                                            "Start year",
                                                                            "End year",
                                                                          ],
                                                                          "timeSelect": "select time",
                                                                          "today": "Today",
                                                                          "weekPlaceholder": "Select week",
                                                                          "weekSelect": "Choose a week",
                                                                          "year": "Year",
                                                                          "yearFormat": "YYYY",
                                                                          "yearPlaceholder": "Select year",
                                                                          "yearSelect": "Choose a year",
                                                                        }
                                                                      }
                                                                      nextIcon={
                                                                        <span
                                                                          className="ant-picker-next-icon"
                                                                        />
                                                                      }
                                                                      onChange={null}
                                                                      onPanelChange={[Function]}
                                                                      onSelect={[Function]}
                                                                      picker="date"
                                                                      pickerRef={
                                                                        Object {
                                                                          "current": Object {
                                                                            "blur": [Function],
                                                                            "focus": [Function],
                                                                          },
                                                                        }
                                                                      }
                                                                      placeholder="authorization.registration.formField.dateOfBirth.placeholder"
                                                                      prefixCls="ant-picker"
                                                                      prevIcon={
                                                                        <span
                                                                          className="ant-picker-prev-icon"
                                                                        />
                                                                      }
                                                                      showToday={true}
                                                                      suffixIcon={<ForwardRef(CalendarOutlined) />}
                                                                      superNextIcon={
                                                                        <span
                                                                          className="ant-picker-super-next-icon"
                                                                        />
                                                                      }
                                                                      superPrevIcon={
                                                                        <span
                                                                          className="ant-picker-super-prev-icon"
                                                                        />
                                                                      }
                                                                      tabIndex={-1}
                                                                      transitionName="ant-slide-up"
                                                                      value={null}
                                                                    />
                                                                  </div>
                                                                }
                                                                popupAlign={Object {}}
                                                                popupClassName=""
                                                                popupPlacement="bottomLeft"
                                                                popupStyle={Object {}}
                                                                popupTransitionName="ant-slide-up"
                                                                popupVisible={false}
                                                                prefixCls="ant-picker-dropdown"
                                                                showAction={Array []}
                                                              >
                                                                <div
                                                                  className="ant-picker"
                                                                  key="trigger"
                                                                  onMouseUp={[Function]}
                                                                  style={
                                                                    Object {
                                                                      "width": "100%",
                                                                    }
                                                                  }
                                                                >
                                                                  <div
                                                                    className="ant-picker-input"
                                                                  >
                                                                    <input
                                                                      autoComplete="off"
                                                                      id="formEditDataUser_dateOfBirth"
                                                                      onBlur={[Function]}
                                                                      onChange={[Function]}
                                                                      onFocus={[Function]}
                                                                      onKeyDown={[Function]}
                                                                      onMouseDown={[Function]}
                                                                      placeholder="authorization.registration.formField.dateOfBirth.placeholder"
                                                                      readOnly={true}
                                                                      size={12}
                                                                      title=""
                                                                      value=""
                                                                    />
                                                                    <span
                                                                      className="ant-picker-suffix"
                                                                    >
                                                                      <ForwardRef(CalendarOutlined)>
                                                                        <AntdIcon
                                                                          icon={
                                                                            Object {
                                                                              "icon": Object {
                                                                                "attrs": Object {
                                                                                  "focusable": "false",
                                                                                  "viewBox": "64 64 896 896",
                                                                                },
                                                                                "children": Array [
                                                                                  Object {
                                                                                    "attrs": Object {
                                                                                      "d": "M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z",
                                                                                    },
                                                                                    "tag": "path",
                                                                                  },
                                                                                ],
                                                                                "tag": "svg",
                                                                              },
                                                                              "name": "calendar",
                                                                              "theme": "outlined",
                                                                            }
                                                                          }
                                                                        >
                                                                          <span
                                                                            aria-label="calendar"
                                                                            className="anticon anticon-calendar"
                                                                            role="img"
                                                                          >
                                                                            <IconReact
                                                                              icon={
                                                                                Object {
                                                                                  "icon": Object {
                                                                                    "attrs": Object {
                                                                                      "focusable": "false",
                                                                                      "viewBox": "64 64 896 896",
                                                                                    },
                                                                                    "children": Array [
                                                                                      Object {
                                                                                        "attrs": Object {
                                                                                          "d": "M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z",
                                                                                        },
                                                                                        "tag": "path",
                                                                                      },
                                                                                    ],
                                                                                    "tag": "svg",
                                                                                  },
                                                                                  "name": "calendar",
                                                                                  "theme": "outlined",
                                                                                }
                                                                              }
                                                                            >
                                                                              <svg
                                                                                aria-hidden="true"
                                                                                data-icon="calendar"
                                                                                fill="currentColor"
                                                                                focusable="false"
                                                                                height="1em"
                                                                                key="svg-calendar"
                                                                                viewBox="64 64 896 896"
                                                                                width="1em"
                                                                              >
                                                                                <path
                                                                                  d="M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z"
                                                                                  key="svg-calendar-svg-0"
                                                                                />
                                                                              </svg>
                                                                            </IconReact>
                                                                          </span>
                                                                        </AntdIcon>
                                                                      </ForwardRef(CalendarOutlined)>
                                                                    </span>
                                                                  </div>
                                                                </div>
                                                              </Trigger>
                                                            </PickerTrigger>
                                                          </InnerPicker>
                                                        </Picker>
                                                      </LocaleReceiver>
                                                    </Picker>
                                                  </Component>
                                                </div>
                                              </div>
                                              <ErrorList
                                                errors={Array []}
                                                onDomErrorVisibleChange={[Function]}
                                              >
                                                <CSSMotion
                                                  motionDeadline={500}
                                                  motionName="ant-show-help"
                                                  onLeaveEnd={[Function]}
                                                  visible={false}
                                                >
                                                  <DomWrapper />
                                                </CSSMotion>
                                              </ErrorList>
                                            </div>
                                          </Col>
                                        </FormItemInput>
                                      </div>
                                    </Row>
                                  </Field>
                                </WrapperField>
                              </FormItem>
                              <FormItem
                                className="user-auth__field "
                                label={
                                  <b>
                                    authorization.registration.formField.phone.label
                                  </b>
                                }
                                name="phone"
                                rules={
                                  Array [
                                    Object {
                                      "message": "authorization.registration.formField.phone.error.required",
                                      "required": true,
                                    },
                                    Object {
                                      "message": "authorization.registration.formField.phone.error.symbols",
                                      "pattern": /\\^\\(\\\\\\+\\)\\?\\[0-9-\\(\\)\\]\\+\\$/g,
                                    },
                                  ]
                                }
                              >
                                <WrapperField
                                  className="user-auth__field "
                                  label={
                                    <b>
                                      authorization.registration.formField.phone.label
                                    </b>
                                  }
                                  messageVariables={
                                    Object {
                                      "label": "phone",
                                    }
                                  }
                                  name="phone"
                                  onReset={[Function]}
                                  rules={
                                    Array [
                                      Object {
                                        "message": "authorization.registration.formField.phone.error.required",
                                        "required": true,
                                      },
                                      Object {
                                        "message": "authorization.registration.formField.phone.error.symbols",
                                        "pattern": /\\^\\(\\\\\\+\\)\\?\\[0-9-\\(\\)\\]\\+\\$/g,
                                      },
                                    ]
                                  }
                                  trigger="onChange"
                                  validateTrigger="onChange"
                                >
                                  <Field
                                    className="user-auth__field "
                                    fieldContext={
                                      Object {
                                        "__INTERNAL__": Object {
                                          "itemRef": [Function],
                                          "name": "formEditDataUser",
                                        },
                                        "getFieldError": [Function],
                                        "getFieldInstance": [Function],
                                        "getFieldValue": [Function],
                                        "getFieldsError": [Function],
                                        "getFieldsValue": [Function],
                                        "getInternalHooks": [Function],
                                        "isFieldTouched": [Function],
                                        "isFieldValidating": [Function],
                                        "isFieldsTouched": [Function],
                                        "isFieldsValidating": [Function],
                                        "resetFields": [Function],
                                        "scrollToField": [Function],
                                        "setFields": [Function],
                                        "setFieldsValue": [Function],
                                        "submit": [Function],
                                        "validateFields": [Function],
                                        "validateTrigger": "onChange",
                                      }
                                    }
                                    key="_phone"
                                    label={
                                      <b>
                                        authorization.registration.formField.phone.label
                                      </b>
                                    }
                                    messageVariables={
                                      Object {
                                        "label": "phone",
                                      }
                                    }
                                    name={
                                      Array [
                                        "phone",
                                      ]
                                    }
                                    onReset={[Function]}
                                    rules={
                                      Array [
                                        Object {
                                          "message": "authorization.registration.formField.phone.error.required",
                                          "required": true,
                                        },
                                        Object {
                                          "message": "authorization.registration.formField.phone.error.symbols",
                                          "pattern": /\\^\\(\\\\\\+\\)\\?\\[0-9-\\(\\)\\]\\+\\$/g,
                                        },
                                      ]
                                    }
                                    trigger="onChange"
                                    validateTrigger="onChange"
                                    valuePropName="value"
                                  >
                                    <Row
                                      className="ant-form-item user-auth__field "
                                      key="row"
                                    >
                                      <div
                                        className="ant-row ant-form-item user-auth__field "
                                        style={Object {}}
                                      >
                                        <FormItemLabel
                                          className="user-auth__field "
                                          htmlFor="formEditDataUser_phone"
                                          label={
                                            <b>
                                              authorization.registration.formField.phone.label
                                            </b>
                                          }
                                          name="phone"
                                          prefixCls="ant-form"
                                          required={true}
                                          requiredMark={true}
                                          rules={
                                            Array [
                                              Object {
                                                "message": "authorization.registration.formField.phone.error.required",
                                                "required": true,
                                              },
                                              Object {
                                                "message": "authorization.registration.formField.phone.error.symbols",
                                                "pattern": /\\^\\(\\\\\\+\\)\\?\\[0-9-\\(\\)\\]\\+\\$/g,
                                              },
                                            ]
                                          }
                                        >
                                          <Col
                                            className="ant-form-item-label"
                                          >
                                            <div
                                              className="ant-col ant-form-item-label"
                                              style={Object {}}
                                            >
                                              <label
                                                className="ant-form-item-required"
                                                htmlFor="formEditDataUser_phone"
                                                title=""
                                              >
                                                <b>
                                                  authorization.registration.formField.phone.label
                                                </b>
                                              </label>
                                            </div>
                                          </Col>
                                        </FormItemLabel>
                                        <FormItemInput
                                          className="user-auth__field "
                                          errors={Array []}
                                          label={
                                            <b>
                                              authorization.registration.formField.phone.label
                                            </b>
                                          }
                                          name={
                                            Array [
                                              "phone",
                                            ]
                                          }
                                          onDomErrorVisibleChange={[Function]}
                                          prefixCls="ant-form"
                                          rules={
                                            Array [
                                              Object {
                                                "message": "authorization.registration.formField.phone.error.required",
                                                "required": true,
                                              },
                                              Object {
                                                "message": "authorization.registration.formField.phone.error.symbols",
                                                "pattern": /\\^\\(\\\\\\+\\)\\?\\[0-9-\\(\\)\\]\\+\\$/g,
                                              },
                                            ]
                                          }
                                          status=""
                                          touched={false}
                                          validateStatus=""
                                          validating={false}
                                        >
                                          <Col
                                            className="ant-form-item-control"
                                          >
                                            <div
                                              className="ant-col ant-form-item-control"
                                              style={Object {}}
                                            >
                                              <div
                                                className="ant-form-item-control-input"
                                              >
                                                <div
                                                  className="ant-form-item-control-input-content"
                                                >
                                                  <Component
                                                    update={2}
                                                    value="88005553535"
                                                  >
                                                    <Input
                                                      id="formEditDataUser_phone"
                                                      onChange={[Function]}
                                                      placeholder="+79991234567"
                                                      type="tel"
                                                      value="88005553535"
                                                    >
                                                      <ClearableLabeledInput
                                                        bordered={true}
                                                        element={
                                                          <input
                                                            className="ant-input"
                                                            id="formEditDataUser_phone"
                                                            onBlur={[Function]}
                                                            onChange={[Function]}
                                                            onFocus={[Function]}
                                                            onKeyDown={[Function]}
                                                            placeholder="+79991234567"
                                                            type="tel"
                                                            value="88005553535"
                                                          />
                                                        }
                                                        focused={false}
                                                        handleReset={[Function]}
                                                        id="formEditDataUser_phone"
                                                        inputType="input"
                                                        onChange={[Function]}
                                                        placeholder="+79991234567"
                                                        prefixCls="ant-input"
                                                        triggerFocus={[Function]}
                                                        type="tel"
                                                        value="88005553535"
                                                      >
                                                        <input
                                                          className="ant-input"
                                                          id="formEditDataUser_phone"
                                                          onBlur={[Function]}
                                                          onChange={[Function]}
                                                          onFocus={[Function]}
                                                          onKeyDown={[Function]}
                                                          placeholder="+79991234567"
                                                          type="tel"
                                                          value="88005553535"
                                                        />
                                                      </ClearableLabeledInput>
                                                    </Input>
                                                  </Component>
                                                </div>
                                              </div>
                                              <ErrorList
                                                errors={Array []}
                                                onDomErrorVisibleChange={[Function]}
                                              >
                                                <CSSMotion
                                                  motionDeadline={500}
                                                  motionName="ant-show-help"
                                                  onLeaveEnd={[Function]}
                                                  visible={false}
                                                >
                                                  <DomWrapper />
                                                </CSSMotion>
                                              </ErrorList>
                                            </div>
                                          </Col>
                                        </FormItemInput>
                                      </div>
                                    </Row>
                                  </Field>
                                </WrapperField>
                              </FormItem>
                              <FormItem>
                                <Row
                                  className="ant-form-item"
                                  key="row"
                                >
                                  <div
                                    className="ant-row ant-form-item"
                                    style={Object {}}
                                  >
                                    <FormItemLabel
                                      prefixCls="ant-form"
                                      requiredMark={true}
                                    />
                                    <FormItemInput
                                      errors={Array []}
                                      onDomErrorVisibleChange={[Function]}
                                      prefixCls="ant-form"
                                      status=""
                                      validateStatus=""
                                    >
                                      <Col
                                        className="ant-form-item-control"
                                      >
                                        <div
                                          className="ant-col ant-form-item-control"
                                          style={Object {}}
                                        >
                                          <div
                                            className="ant-form-item-control-input"
                                          >
                                            <div
                                              className="ant-form-item-control-input-content"
                                            >
                                              <Button
                                                block={true}
                                                className="user-auth__button"
                                                htmlType="submit"
                                                loading={false}
                                                type="primary"
                                              >
                                                <Wave>
                                                  <button
                                                    className="ant-btn ant-btn-primary ant-btn-block user-auth__button"
                                                    onClick={[Function]}
                                                    type="submit"
                                                  >
                                                    <LoadingIcon
                                                      existIcon={false}
                                                      loading={false}
                                                      prefixCls="ant-btn"
                                                    >
                                                      <CSSMotion
                                                        motionName="ant-btn-loading-icon-motion"
                                                        onAppearActive={[Function]}
                                                        onAppearStart={[Function]}
                                                        onEnterActive={[Function]}
                                                        onEnterStart={[Function]}
                                                        onLeaveActive={[Function]}
                                                        onLeaveStart={[Function]}
                                                        removeOnLeave={true}
                                                        visible={false}
                                                      >
                                                        <DomWrapper />
                                                      </CSSMotion>
                                                    </LoadingIcon>
                                                    <span
                                                      key=".0"
                                                    >
                                                      cardUserEdit.button.save
                                                    </span>
                                                  </button>
                                                </Wave>
                                              </Button>
                                            </div>
                                          </div>
                                          <ErrorList
                                            errors={Array []}
                                            onDomErrorVisibleChange={[Function]}
                                          >
                                            <CSSMotion
                                              motionDeadline={500}
                                              motionName="ant-show-help"
                                              onLeaveEnd={[Function]}
                                              visible={false}
                                            >
                                              <DomWrapper />
                                            </CSSMotion>
                                          </ErrorList>
                                        </div>
                                      </Col>
                                    </FormItemInput>
                                  </div>
                                </Row>
                              </FormItem>
                            </form>
                          </ForwardRef(Form)>
                        </SizeContextProvider>
                      </ForwardRef(InternalForm)>
                    </div>
                  </CardUserEdit>
                </div>
              </div>
            </div>
          </Modal>
        </ModalPostForm>
      </ProfileForm>
    </Router>
  </HashRouter>
</Provider>
`;
