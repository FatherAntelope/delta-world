// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`LoginForm component form testing: Render with snapshot 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [MockFunction],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <HashRouter>
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "createHref": [Function],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "length": 2,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "pathname": "/user/234325ih8n9l79uj",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <LoginForm>
        <div
          className="user-auth"
        >
          <div
            className="user-auth__body"
          >
            <h2
              className="user-auth__header user-auth__header_theme_dark"
            >
              authorization.login.title
            </h2>
            <ForwardRef(InternalForm)
              form={
                Object {
                  "__INTERNAL__": Object {
                    "itemRef": [Function],
                    "name": "formAuthUser",
                  },
                  "getFieldError": [Function],
                  "getFieldInstance": [Function],
                  "getFieldValue": [Function],
                  "getFieldsError": [Function],
                  "getFieldsValue": [Function],
                  "getInternalHooks": [Function],
                  "isFieldTouched": [Function],
                  "isFieldValidating": [Function],
                  "isFieldsTouched": [Function],
                  "isFieldsValidating": [Function],
                  "resetFields": [Function],
                  "scrollToField": [Function],
                  "setFields": [Function],
                  "setFieldsValue": [Function],
                  "submit": [Function],
                  "validateFields": [Function],
                }
              }
              id="formLoginUser"
              layout="vertical"
              name="formAuthUser"
              onError={[Function]}
              onFinish={[Function]}
            >
              <SizeContextProvider>
                <ForwardRef(Form)
                  className="ant-form ant-form-vertical"
                  form={
                    Object {
                      "__INTERNAL__": Object {
                        "itemRef": [Function],
                        "name": "formAuthUser",
                      },
                      "getFieldError": [Function],
                      "getFieldInstance": [Function],
                      "getFieldValue": [Function],
                      "getFieldsError": [Function],
                      "getFieldsValue": [Function],
                      "getInternalHooks": [Function],
                      "isFieldTouched": [Function],
                      "isFieldValidating": [Function],
                      "isFieldsTouched": [Function],
                      "isFieldsValidating": [Function],
                      "resetFields": [Function],
                      "scrollToField": [Function],
                      "setFields": [Function],
                      "setFieldsValue": [Function],
                      "submit": [Function],
                      "validateFields": [Function],
                    }
                  }
                  id="formLoginUser"
                  name="formAuthUser"
                  onError={[Function]}
                  onFinish={[Function]}
                  onFinishFailed={[Function]}
                >
                  <form
                    className="ant-form ant-form-vertical"
                    id="formLoginUser"
                    onError={[Function]}
                    onReset={[Function]}
                    onSubmit={[Function]}
                  >
                    <FormItem
                      className="user-auth__field user-auth__field_theme_dark"
                      label={
                        <b>
                          authorization.login.formField.id.label
                        </b>
                      }
                      name="userID"
                      rules={
                        Array [
                          Object {
                            "message": "authorization.login.formField.id.error.required",
                            "required": true,
                          },
                        ]
                      }
                    >
                      <WrapperField
                        className="user-auth__field user-auth__field_theme_dark"
                        label={
                          <b>
                            authorization.login.formField.id.label
                          </b>
                        }
                        messageVariables={
                          Object {
                            "label": "userID",
                          }
                        }
                        name="userID"
                        onReset={[Function]}
                        rules={
                          Array [
                            Object {
                              "message": "authorization.login.formField.id.error.required",
                              "required": true,
                            },
                          ]
                        }
                        trigger="onChange"
                        validateTrigger="onChange"
                      >
                        <Field
                          className="user-auth__field user-auth__field_theme_dark"
                          fieldContext={
                            Object {
                              "__INTERNAL__": Object {
                                "itemRef": [Function],
                                "name": "formAuthUser",
                              },
                              "getFieldError": [Function],
                              "getFieldInstance": [Function],
                              "getFieldValue": [Function],
                              "getFieldsError": [Function],
                              "getFieldsValue": [Function],
                              "getInternalHooks": [Function],
                              "isFieldTouched": [Function],
                              "isFieldValidating": [Function],
                              "isFieldsTouched": [Function],
                              "isFieldsValidating": [Function],
                              "resetFields": [Function],
                              "scrollToField": [Function],
                              "setFields": [Function],
                              "setFieldsValue": [Function],
                              "submit": [Function],
                              "validateFields": [Function],
                              "validateTrigger": "onChange",
                            }
                          }
                          key="_userID"
                          label={
                            <b>
                              authorization.login.formField.id.label
                            </b>
                          }
                          messageVariables={
                            Object {
                              "label": "userID",
                            }
                          }
                          name={
                            Array [
                              "userID",
                            ]
                          }
                          onReset={[Function]}
                          rules={
                            Array [
                              Object {
                                "message": "authorization.login.formField.id.error.required",
                                "required": true,
                              },
                            ]
                          }
                          trigger="onChange"
                          validateTrigger="onChange"
                          valuePropName="value"
                        >
                          <Row
                            className="ant-form-item user-auth__field user-auth__field_theme_dark"
                            key="row"
                          >
                            <div
                              className="ant-row ant-form-item user-auth__field user-auth__field_theme_dark"
                              style={Object {}}
                            >
                              <FormItemLabel
                                className="user-auth__field user-auth__field_theme_dark"
                                htmlFor="formAuthUser_userID"
                                label={
                                  <b>
                                    authorization.login.formField.id.label
                                  </b>
                                }
                                name="userID"
                                prefixCls="ant-form"
                                required={true}
                                requiredMark={true}
                                rules={
                                  Array [
                                    Object {
                                      "message": "authorization.login.formField.id.error.required",
                                      "required": true,
                                    },
                                  ]
                                }
                              >
                                <Col
                                  className="ant-form-item-label"
                                >
                                  <div
                                    className="ant-col ant-form-item-label"
                                    style={Object {}}
                                  >
                                    <label
                                      className="ant-form-item-required"
                                      htmlFor="formAuthUser_userID"
                                      title=""
                                    >
                                      <b>
                                        authorization.login.formField.id.label
                                      </b>
                                    </label>
                                  </div>
                                </Col>
                              </FormItemLabel>
                              <FormItemInput
                                className="user-auth__field user-auth__field_theme_dark"
                                errors={Array []}
                                label={
                                  <b>
                                    authorization.login.formField.id.label
                                  </b>
                                }
                                name={
                                  Array [
                                    "userID",
                                  ]
                                }
                                onDomErrorVisibleChange={[Function]}
                                prefixCls="ant-form"
                                rules={
                                  Array [
                                    Object {
                                      "message": "authorization.login.formField.id.error.required",
                                      "required": true,
                                    },
                                  ]
                                }
                                status=""
                                touched={false}
                                validateStatus=""
                                validating={false}
                              >
                                <Col
                                  className="ant-form-item-control"
                                >
                                  <div
                                    className="ant-col ant-form-item-control"
                                    style={Object {}}
                                  >
                                    <div
                                      className="ant-form-item-control-input"
                                    >
                                      <div
                                        className="ant-form-item-control-input-content"
                                      >
                                        <Component
                                          update={1}
                                        >
                                          <Input
                                            id="formAuthUser_userID"
                                            onChange={[Function]}
                                            placeholder="authorization.login.formField.id.placeholder"
                                            type="text"
                                          >
                                            <ClearableLabeledInput
                                              bordered={true}
                                              element={
                                                <input
                                                  className="ant-input"
                                                  id="formAuthUser_userID"
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  onFocus={[Function]}
                                                  onKeyDown={[Function]}
                                                  placeholder="authorization.login.formField.id.placeholder"
                                                  type="text"
                                                />
                                              }
                                              focused={false}
                                              handleReset={[Function]}
                                              id="formAuthUser_userID"
                                              inputType="input"
                                              onChange={[Function]}
                                              placeholder="authorization.login.formField.id.placeholder"
                                              prefixCls="ant-input"
                                              triggerFocus={[Function]}
                                              type="text"
                                              value=""
                                            >
                                              <input
                                                className="ant-input"
                                                id="formAuthUser_userID"
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                                onFocus={[Function]}
                                                onKeyDown={[Function]}
                                                placeholder="authorization.login.formField.id.placeholder"
                                                type="text"
                                                value=""
                                              />
                                            </ClearableLabeledInput>
                                          </Input>
                                        </Component>
                                      </div>
                                    </div>
                                    <ErrorList
                                      errors={Array []}
                                      onDomErrorVisibleChange={[Function]}
                                    >
                                      <CSSMotion
                                        motionDeadline={500}
                                        motionName="ant-show-help"
                                        onLeaveEnd={[Function]}
                                        visible={false}
                                      >
                                        <DomWrapper />
                                      </CSSMotion>
                                    </ErrorList>
                                  </div>
                                </Col>
                              </FormItemInput>
                            </div>
                          </Row>
                        </Field>
                      </WrapperField>
                    </FormItem>
                    <FormItem>
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            prefixCls="ant-form"
                            requiredMark={true}
                          />
                          <FormItemInput
                            errors={Array []}
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            status=""
                            validateStatus=""
                          >
                            <Col
                              className="ant-form-item-control"
                            >
                              <div
                                className="ant-col ant-form-item-control"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Button
                                      block={true}
                                      className="user-auth__button"
                                      htmlType="submit"
                                      loading={false}
                                      type="primary"
                                    >
                                      <Wave>
                                        <button
                                          className="ant-btn ant-btn-primary ant-btn-block user-auth__button"
                                          onClick={[Function]}
                                          type="submit"
                                        >
                                          <LoadingIcon
                                            existIcon={false}
                                            loading={false}
                                            prefixCls="ant-btn"
                                          >
                                            <CSSMotion
                                              motionName="ant-btn-loading-icon-motion"
                                              onAppearActive={[Function]}
                                              onAppearStart={[Function]}
                                              onEnterActive={[Function]}
                                              onEnterStart={[Function]}
                                              onLeaveActive={[Function]}
                                              onLeaveStart={[Function]}
                                              removeOnLeave={true}
                                              visible={false}
                                            >
                                              <DomWrapper />
                                            </CSSMotion>
                                          </LoadingIcon>
                                          <span
                                            key=".0"
                                          >
                                            authorization.login.button
                                          </span>
                                        </button>
                                      </Wave>
                                    </Button>
                                    <p
                                      className="user-auth__info user-auth__info_theme_dark"
                                    >
                                      authorization.login.info.text
                                       
                                      <Link
                                        to="/register"
                                      >
                                        <LinkAnchor
                                          href="#/register"
                                          navigate={[Function]}
                                        >
                                          <a
                                            href="#/register"
                                            onClick={[Function]}
                                          >
                                            authorization.login.info.link
                                          </a>
                                        </LinkAnchor>
                                      </Link>
                                    </p>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionDeadline={500}
                                    motionName="ant-show-help"
                                    onLeaveEnd={[Function]}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </FormItem>
                  </form>
                </ForwardRef(Form)>
              </SizeContextProvider>
            </ForwardRef(InternalForm)>
          </div>
        </div>
      </LoginForm>
    </Router>
  </HashRouter>
</Provider>
`;
